// <auto-generated />
using MicroMotel.Motel.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroMotel.Services.Motel.Migrations
{
    [DbContext(typeof(MotelContext))]
    [Migration("20230808151339_nullable")]
    partial class nullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MicroMotel.Motel.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("FloorCount")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasOpenSpace")
                        .HasColumnType("bit");

                    b.Property<bool>("HasParking")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("RoomCount")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Property", "Motel");
                });

            modelBuilder.Entity("MicroMotel.Motel.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("BedCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Floor")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HasAC")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBath")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFridge")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNetwork")
                        .HasColumnType("bit");

                    b.Property<bool>("HasTv")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Room", "Motel");
                });

            modelBuilder.Entity("MicroMotel.Services.Motel.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrepTime")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Meal", "Motel");
                });

            modelBuilder.Entity("MicroMotel.Motel.Models.Property", b =>
                {
                    b.OwnsOne("MicroMotel.Motel.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PropertyId")
                                .HasColumnType("int");

                            b1.Property<string>("Building")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("District")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PropertyId");

                            b1.ToTable("Property", "Motel");

                            b1.WithOwner()
                                .HasForeignKey("PropertyId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MicroMotel.Motel.Models.Room", b =>
                {
                    b.HasOne("MicroMotel.Motel.Models.Property", null)
                        .WithMany("Rooms")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MicroMotel.Services.Motel.Models.Meal", b =>
                {
                    b.HasOne("MicroMotel.Motel.Models.Property", null)
                        .WithMany("Meals")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MicroMotel.Motel.Models.Property", b =>
                {
                    b.Navigation("Meals");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
